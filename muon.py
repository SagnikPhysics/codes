# -*- coding: utf-8 -*-
"""muon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mzmkxXdEsTGGz_xLKYlsfQIQcPWKaq66
"""

import numpy as np
import matplotlib.pyplot as pl
from collections import Counter
from scipy.odr import Model, ODR, RealData
from scipy.optimize import curve_fit

def f(params, x):
  N0, l, B = params
  return N0*np.exp(-l*x)+B
model = Model(f)


time,_ = np.loadtxt("/content/drive/MyDrive/Muon detection experiment datasets/muon 4.txt",int,unpack=True)
time.sort()
time = [value for value in time if(value<10000)]

time_counts = Counter(time)
distinct_time1 = list(time_counts.keys())
distinct_time1 = np.array(distinct_time1)
counts1 = np.array([time_counts[t] for t in distinct_time1])

time_errors = 20*np.ones(len(distinct_time1))
count_errors = np.array([np.sqrt(counts1)])

data = RealData(distinct_time1, counts1, sx = time_errors, sy = count_errors)

fit,_ = curve_fit(lambda x,N0,l,B: N0*np.exp(-l*x)+B, distinct_time1, counts1)
odr = ODR(data, model, beta0=fit) # Creating ODR object

result = odr.run()
fit1 = result.beta
err1 = result.sd_beta


time,_ = np.loadtxt("/content/drive/MyDrive/Muon detection experiment datasets/muon 2.txt",int,unpack=True)
time.sort()
time = [value for value in time if(value<10000)]

time_counts = Counter(time)
distinct_time2 = list(time_counts.keys())
distinct_time2 = np.array(distinct_time2)
counts2 = np.array([time_counts[t] for t in distinct_time2])

count_errors = np.array([np.sqrt(counts2)])
data = RealData(distinct_time2, counts2, sx = time_errors, sy = count_errors)

fit,_ = curve_fit(lambda x,N0,l,B: N0*np.exp(-l*x)+B, distinct_time2, counts2)
odr = ODR(data, model, beta0=fit) # Creating ODR object

result = odr.run()
fit2 = result.beta
err2 = result.sd_beta

legend1 = "For 4 Volt, lifetime, $\dfrac{1}{\lambda} = ($"+str(round(1.0/(1000*fit1[1]),3))+"$\pm$"+str(round(err1[1]/1000,12))+"$)~\mu s$"
legend2 = "For 2 Volt, lifetime, $\dfrac{1}{\lambda} = ($"+str(round(1.0/(1000*fit2[1]),3))+"$\pm$"+str(round(err2[1]/1000,12))+"$)~\mu s$"

"""
pl.plot(distinct_time2, counts2, 'k.',zorder=0)
fit_plot = np.linspace(min(distinct_time2),max(distinct_time2))
pl.plot(fit_plot, fit2[0]*np.exp(-fit2[1]*fit_plot)+fit2[2], 'r--',zorder=1,label=legend2)
pl.xlim(-100,20100)
pl.xlabel("time intervals (in ms)")
pl.ylabel("muon counts")
pl.legend(loc="best")
pl.show()

pl.plot(distinct_time1, counts1, 'k.',zorder=0)
fit_plot = np.linspace(min(distinct_time1),max(distinct_time1))
pl.plot(fit_plot, fit1[0]*np.exp(-fit1[1]*fit_plot)+fit1[2], 'r--',zorder=1,label=legend1)
pl.xlim(-100,20100)
pl.xlabel("time intervals (in ms)")
pl.ylabel("muon counts")
pl.legend(loc="best")
pl.show()
"""

pl.subplots_adjust(hspace=0.000)
ax1 = pl.subplot(2,1,1)
ax1.plot(distinct_time2,counts2,'k.',zorder=0)
fit_plot = np.linspace(min(distinct_time2),max(distinct_time2))
ax1.plot(fit_plot, fit2[0]*np.exp(-fit2[1]*fit_plot)+fit2[2], 'r--',zorder=1,label=legend2)
pl.ylabel("muon counts")
pl.legend(loc="best")

ax2 = pl.subplot(2,1,2)
ax2.plot(distinct_time1,counts1,'k.',zorder=0)
fit_plot = np.linspace(min(distinct_time1),max(distinct_time1))
ax2.plot(fit_plot, fit1[0]*np.exp(-fit1[1]*fit_plot)+fit1[2], 'r--',zorder=1,label=legend1)
#pl.xlim(-100,20100)
pl.xlabel("time intervals (in ms)")
pl.ylabel("muon counts")
pl.legend(loc="best")
pl.savefig("muon plot.pdf",dpi=50000)
pl.show()