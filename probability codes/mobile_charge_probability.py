# -*- coding: utf-8 -*-
"""mobile charge probability.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vVB1wSmfLmQfHW6kFEQtJScIEevJv6xs
"""

# Q5

import numpy as np
from scipy.integrate import quad

mu = 120
sigma = 20
def P(L):
  return 1/(np.sqrt(2*np.pi)*sigma)*np.exp(-(L-mu)**2/(2*sigma**2))

P1 = quad(P, 130, +np.inf)
print("(a) The probability P(L>130) is",round(P1[0],3))

def P2(d):
  prob = quad(P,-np.inf,d)
  p= prob[0]
  return p-0.835

def bisection(a,b): # a, b are two guess values
  if(np.sign(P2(a))==np.sign(P2(b))):
    raise Exception("The scalars a and b do not bound a root")
  m = (a+b)/2
  tol = 1e-5
  if np.abs(P2(m))<tol: return m
  elif np.sign(P2(a))==np.sign(P2(m)): return bisection(m,b)
  elif np.sign(P2(b))==np.sign(P2(m)): return bisection(a,m)

d_val = int(bisection(120.0,220.0)) # a = 120.0 and b = 220.0
print("(b) The value of d for which P(L<d)=0.835 is",d_val)

P3 = quad(P,100,+np.inf)
print("(c)The probability that his phone will remain charged before the end of the journey is:",round(P3[0],3))